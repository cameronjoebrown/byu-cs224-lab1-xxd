00000000: 2369 6e63 6c75 6465 203c 7374 6469 6f2e  #include <stdio.
00000010: 683e 0a23 696e 636c 7564 6520 3c73 7464  h>.#include <std
00000020: 6c69 622e 683e 0a23 696e 636c 7564 6520  lib.h>.#include 
00000030: 3c73 7472 696e 672e 683e 0a0a 2364 6566  <string.h>..#def
00000040: 696e 6520 5452 5545 2031 0a23 6465 6669  ine TRUE 1.#defi
00000050: 6e65 2046 414c 5345 2030 0a23 6465 6669  ne FALSE 0.#defi
00000060: 6e65 2042 4144 5f4e 554d 4245 525f 4152  ne BAD_NUMBER_AR
00000070: 4753 2031 0a0a 2f2a 2a0a 202a 2050 6172  GS 1../**. * Par
00000080: 7365 7320 7468 6520 636f 6d6d 616e 6420  ses the command 
00000090: 6c69 6e65 2e0a 202a 0a20 2a20 6172 6763  line.. *. * argc
000000a0: 3a20 7468 6520 6e75 6d62 6572 206f 6620  : the number of 
000000b0: 6974 656d 7320 6f6e 2074 6865 2063 6f6d  items on the com
000000c0: 6d61 6e64 206c 696e 6520 2861 6e64 206c  mand line (and l
000000d0: 656e 6774 6820 6f66 2074 6865 0a20 2a20  ength of the. * 
000000e0: 2020 2020 2020 6172 6776 2061 7272 6179        argv array
000000f0: 2920 696e 636c 7564 696e 6720 7468 6520  ) including the 
00000100: 6578 6563 7574 6162 6c65 0a20 2a20 6172  executable. * ar
00000110: 6776 3a20 7468 6520 6172 7261 7920 6f66  gv: the array of
00000120: 2061 7267 756d 656e 7473 2061 7320 7374   arguments as st
00000130: 7269 6e67 7320 2863 6861 722a 2061 7272  rings (char* arr
00000140: 6179 290a 202a 2062 6974 733a 2074 6865  ay). * bits: the
00000150: 2069 6e74 6567 6572 2076 616c 7565 2069   integer value i
00000160: 7320 7365 7420 746f 2054 5255 4520 6966  s set to TRUE if
00000170: 2062 6974 7320 6f75 7470 7574 2069 6e64   bits output ind
00000180: 6963 6174 6564 0a20 2a20 2020 2020 2020  icated. *       
00000190: 6f75 7468 6572 7769 7365 2046 414c 5345  outherwise FALSE
000001a0: 2066 6f72 2068 6578 206f 7574 7075 740a   for hex output.
000001b0: 202a 0a20 2a20 7265 7475 726e 7320 7468   *. * returns th
000001c0: 6520 696e 7075 7420 6669 6c65 2070 6f69  e input file poi
000001d0: 6e74 6572 2028 4649 4c45 2a29 0a20 2a2a  nter (FILE*). **
000001e0: 2f0a 4649 4c45 202a 7061 7273 6543 6f6d  /.FILE *parseCom
000001f0: 6d61 6e64 4c69 6e65 2869 6e74 2061 7267  mandLine(int arg
00000200: 632c 2063 6861 7220 2a2a 6172 6776 2c20  c, char **argv, 
00000210: 696e 7420 2a62 6974 7329 207b 0a20 2069  int *bits) {.  i
00000220: 6620 2861 7267 6320 3e20 3229 207b 0a20  f (argc > 2) {. 
00000230: 2020 2070 7269 6e74 6628 2255 7361 6765     printf("Usage
00000240: 3a20 2573 205b 2d62 7c2d 6269 7473 5d5c  : %s [-b|-bits]\
00000250: 6e22 2c20 6172 6776 5b30 5d29 3b0a 2020  n", argv[0]);.  
00000260: 2020 6578 6974 2842 4144 5f4e 554d 4245    exit(BAD_NUMBE
00000270: 525f 4152 4753 293b 0a20 207d 0a0a 2020  R_ARGS);.  }..  
00000280: 6966 2028 6172 6763 203d 3d20 3220 2626  if (argc == 2 &&
00000290: 0a20 2020 2020 2028 7374 7263 6d70 2861  .      (strcmp(a
000002a0: 7267 765b 315d 2c20 222d 6222 2920 3d3d  rgv[1], "-b") ==
000002b0: 2030 207c 7c20 7374 7263 6d70 2861 7267   0 || strcmp(arg
000002c0: 765b 315d 2c20 222d 6269 7473 2229 203d  v[1], "-bits") =
000002d0: 3d20 3029 2920 7b0a 2020 2020 2a62 6974  = 0)) {.    *bit
000002e0: 7320 3d20 5452 5545 3b0a 2020 7d20 656c  s = TRUE;.  } el
000002f0: 7365 207b 0a20 2020 202a 6269 7473 203d  se {.    *bits =
00000300: 2046 414c 5345 3b0a 2020 7d0a 0a20 2072   FALSE;.  }..  r
00000310: 6574 7572 6e20 7374 6469 6e3b 0a7d 0a0a  eturn stdin;.}..
00000320: 2f2a 2a0a 202a 2057 7269 7465 7320 6461  /**. * Writes da
00000330: 7461 2074 6f20 7374 646f 7574 2069 6e20  ta to stdout in 
00000340: 6865 7861 6465 6369 6d61 6c2e 0a20 2a0a  hexadecimal.. *.
00000350: 202a 2053 6565 206d 7978 7864 2e6d 6420   * See myxxd.md 
00000360: 666f 7220 6465 7461 696c 732e 0a20 2a0a  for details.. *.
00000370: 202a 2064 6174 613a 2061 6e20 6172 7261   * data: an arra
00000380: 7920 6f66 206e 6f20 6d6f 7265 2074 6861  y of no more tha
00000390: 6e20 3136 2063 6861 7261 6374 6572 730a  n 16 characters.
000003a0: 202a 2073 697a 653a 2074 6865 2073 697a   * size: the siz
000003b0: 6520 6f66 2074 6865 2061 7272 6179 0a20  e of the array. 
000003c0: 2a2a 2f0a 766f 6964 2070 7269 6e74 4461  **/.void printDa
000003d0: 7461 4173 4865 7828 756e 7369 676e 6564  taAsHex(unsigned
000003e0: 2063 6861 7220 2a64 6174 612c 2073 697a   char *data, siz
000003f0: 655f 7420 7369 7a65 2920 7b0a 2020 696e  e_t size) {.  in
00000400: 7420 693b 0a20 2066 6f72 2869 203d 2030  t i;.  for(i = 0
00000410: 3b20 6920 3c20 7369 7a65 3b20 692b 2b29  ; i < size; i++)
00000420: 207b 0a20 2020 2069 6628 6920 2520 3220   {.    if(i % 2 
00000430: 3d3d 2030 2920 7b0a 2020 2020 2020 7072  == 0) {.      pr
00000440: 696e 7466 2822 2022 293b 0a20 2020 207d  intf(" ");.    }
00000450: 0a20 2020 2069 6628 6461 7461 5b69 5d20  .    if(data[i] 
00000460: 3d3d 2027 5c6e 2729 207b 0a20 2020 2020  == '\n') {.     
00000470: 2020 7072 696e 7466 2822 2573 222c 2022    printf("%s", "
00000480: 3061 2229 3b0a 2020 2020 7d0a 2020 2020  0a");.    }.    
00000490: 656c 7365 207b 0a20 2020 2020 2070 7269  else {.      pri
000004a0: 6e74 6628 2225 7822 2c20 6461 7461 5b69  ntf("%x", data[i
000004b0: 5d29 3b0a 2020 2020 7d0a 2020 7d0a 2020  ]);.    }.  }.  
000004c0: 7768 696c 6528 7369 7a65 203c 2031 3629  while(size < 16)
000004d0: 207b 0a20 2020 2070 7269 6e74 6628 2220   {.    printf(" 
000004e0: 2022 293b 0a20 2020 2073 697a 652b 2b3b   ");.    size++;
000004f0: 0a20 2020 2069 6628 7369 7a65 2025 2032  .    if(size % 2
00000500: 203d 3d20 3029 207b 0a20 2020 2020 2070   == 0) {.      p
00000510: 7269 6e74 6628 2220 2229 3b0a 2020 2020  rintf(" ");.    
00000520: 7d0a 2020 7d0a 7d0a 0a2f 2a2a 0a20 2a20  }.  }.}../**. * 
00000530: 5772 6974 6573 2064 6174 6120 746f 2073  Writes data to s
00000540: 7464 6f75 7420 6173 2063 6861 7261 6374  tdout as charact
00000550: 6572 732e 0a20 2a0a 202a 2053 6565 206d  ers.. *. * See m
00000560: 7978 7864 2e6d 6420 666f 7220 6465 7461  yxxd.md for deta
00000570: 696c 732e 0a20 2a0a 202a 2064 6174 613a  ils.. *. * data:
00000580: 2061 6e20 6172 7261 7920 6f66 206e 6f20   an array of no 
00000590: 6d6f 7265 2074 6861 6e20 3136 2063 6861  more than 16 cha
000005a0: 7261 6374 6572 730a 202a 2073 697a 653a  racters. * size:
000005b0: 2074 6865 2073 697a 6520 6f66 2074 6865   the size of the
000005c0: 2061 7272 6179 0a20 2a2a 2f0a 766f 6964   array. **/.void
000005d0: 2070 7269 6e74 4461 7461 4173 4368 6172   printDataAsChar
000005e0: 7328 756e 7369 676e 6564 2063 6861 7220  s(unsigned char 
000005f0: 2a64 6174 612c 2073 697a 655f 7420 7369  *data, size_t si
00000600: 7a65 2920 7b0a 2020 696e 7420 693b 0a20  ze) {.  int i;. 
00000610: 2066 6f72 2869 203d 2030 3b20 6920 3c20   for(i = 0; i < 
00000620: 7369 7a65 3b20 692b 2b29 207b 0a20 2020  size; i++) {.   
00000630: 2069 6628 6461 7461 5b69 5d20 3e20 3132   if(data[i] > 12
00000640: 3620 7c7c 2064 6174 615b 695d 203c 2033  6 || data[i] < 3
00000650: 3229 207b 0a20 2020 2020 2070 7269 6e74  2) {.      print
00000660: 6628 222e 2229 3b0a 2020 2020 7d0a 2020  f(".");.    }.  
00000670: 2020 656c 7365 207b 0a20 2020 2020 2070    else {.      p
00000680: 7269 6e74 6628 2225 6322 2c20 6461 7461  rintf("%c", data
00000690: 5b69 5d29 3b0a 2020 2020 7d0a 2020 7d0a  [i]);.    }.  }.
000006a0: 7d0a 0a76 6f69 6420 7265 6164 416e 6450  }..void readAndP
000006b0: 7269 6e74 496e 7075 7441 7348 6578 2846  rintInputAsHex(F
000006c0: 494c 4520 2a69 6e70 7574 2920 7b0a 2020  ILE *input) {.  
000006d0: 756e 7369 676e 6564 2063 6861 7220 6461  unsigned char da
000006e0: 7461 5b31 365d 3b0a 2020 696e 7420 6e75  ta[16];.  int nu
000006f0: 6d42 7974 6573 5265 6164 203d 2066 7265  mBytesRead = fre
00000700: 6164 2864 6174 612c 2031 2c20 3136 2c20  ad(data, 1, 16, 
00000710: 696e 7075 7429 3b0a 2020 756e 7369 676e  input);.  unsign
00000720: 6564 2069 6e74 206f 6666 7365 7420 3d20  ed int offset = 
00000730: 303b 0a20 2077 6869 6c65 2028 6e75 6d42  0;.  while (numB
00000740: 7974 6573 5265 6164 2021 3d20 3029 207b  ytesRead != 0) {
00000750: 0a20 2020 2070 7269 6e74 6628 2225 3038  .    printf("%08
00000760: 783a 222c 206f 6666 7365 7429 3b0a 2020  x:", offset);.  
00000770: 2020 6f66 6673 6574 202b 3d20 6e75 6d42    offset += numB
00000780: 7974 6573 5265 6164 3b0a 2020 2020 7072  ytesRead;.    pr
00000790: 696e 7444 6174 6141 7348 6578 2864 6174  intDataAsHex(dat
000007a0: 612c 206e 756d 4279 7465 7352 6561 6429  a, numBytesRead)
000007b0: 3b0a 2020 2020 7072 696e 7466 2822 2020  ;.    printf("  
000007c0: 2229 3b0a 2020 2020 7072 696e 7444 6174  ");.    printDat
000007d0: 6141 7343 6861 7273 2864 6174 612c 206e  aAsChars(data, n
000007e0: 756d 4279 7465 7352 6561 6429 3b0a 2020  umBytesRead);.  
000007f0: 2020 7072 696e 7466 2822 5c6e 2229 3b0a    printf("\n");.
00000800: 2020 2020 6e75 6d42 7974 6573 5265 6164      numBytesRead
00000810: 203d 2066 7265 6164 2864 6174 612c 2031   = fread(data, 1
00000820: 2c20 3136 2c20 696e 7075 7429 3b0a 2020  , 16, input);.  
00000830: 7d0a 7d0a 2f2a 2a0a 2a20 5772 6974 6573  }.}./**.* Writes
00000840: 2064 6174 6120 746f 2073 7464 6f75 7420   data to stdout 
00000850: 6173 2062 6974 732e 0a2a 0a2a 2064 6174  as bits..*.* dat
00000860: 613a 2061 6e20 6172 7261 7920 6f66 206e  a: an array of n
00000870: 6f20 6d6f 7265 2074 6861 6e20 3620 6368  o more than 6 ch
00000880: 6172 6163 7465 7273 0a2a 2073 697a 653a  aracters.* size:
00000890: 2074 6865 2073 697a 6520 6f66 2074 6865   the size of the
000008a0: 2061 7272 6179 0a2a 2a2f 0a76 6f69 6420   array.**/.void 
000008b0: 7072 696e 7444 6174 6141 7342 6974 7328  printDataAsBits(
000008c0: 756e 7369 676e 6564 2063 6861 7220 2a64  unsigned char *d
000008d0: 6174 612c 2073 697a 655f 7420 7369 7a65  ata, size_t size
000008e0: 2920 7b0a 2020 696e 7420 693b 0a20 2066  ) {.  int i;.  f
000008f0: 6f72 2869 203d 2030 3b20 6920 3c20 7369  or(i = 0; i < si
00000900: 7a65 3b20 692b 2b29 207b 0a20 2020 2069  ze; i++) {.    i
00000910: 6e74 2074 203d 2030 3b0a 2020 2020 7072  nt t = 0;.    pr
00000920: 696e 7466 2822 2022 293b 0a20 2020 2075  intf(" ");.    u
00000930: 6e73 6967 6e65 6420 6368 6172 2078 203d  nsigned char x =
00000940: 2064 6174 615b 695d 3b0a 2020 2020 756e   data[i];.    un
00000950: 7369 676e 6564 2063 6861 7220 6269 7441  signed char bitA
00000960: 7272 6179 5b38 5d3b 0a20 2020 2077 6869  rray[8];.    whi
00000970: 6c65 2874 203c 2038 2920 7b0a 2020 2020  le(t < 8) {.    
00000980: 2020 6966 2878 2025 2032 203d 3d20 3129    if(x % 2 == 1)
00000990: 207b 0a20 2020 2020 2020 2062 6974 4172   {.        bitAr
000009a0: 7261 795b 745d 203d 2027 3127 3b0a 2020  ray[t] = '1';.  
000009b0: 2020 2020 7d0a 2020 2020 2020 656c 7365      }.      else
000009c0: 207b 0a20 2020 2020 2020 2062 6974 4172   {.        bitAr
000009d0: 7261 795b 745d 203d 2027 3027 3b0a 2020  ray[t] = '0';.  
000009e0: 2020 2020 7d0a 2020 2020 2020 7820 3d20      }.      x = 
000009f0: 7820 2f20 323b 0a20 2020 2020 2074 2b2b  x / 2;.      t++
00000a00: 3b0a 2020 2020 7d0a 2020 2020 696e 7420  ;.    }.    int 
00000a10: 6a3b 0a20 2020 2066 6f72 286a 203d 2037  j;.    for(j = 7
00000a20: 3b20 6a20 3e3d 2030 3b20 6a2d 2d29 207b  ; j >= 0; j--) {
00000a30: 0a20 2020 2020 2070 7269 6e74 6628 2225  .      printf("%
00000a40: 6322 2c20 6269 7441 7272 6179 5b6a 5d29  c", bitArray[j])
00000a50: 3b0a 2020 2020 7d0a 2020 7d0a 2020 7768  ;.    }.  }.  wh
00000a60: 696c 6528 7369 7a65 203c 2036 2920 7b0a  ile(size < 6) {.
00000a70: 2020 2020 7072 696e 7466 2822 2020 2020      printf("    
00000a80: 2020 2020 2229 3b0a 2020 2020 7072 696e      ");.    prin
00000a90: 7466 2822 2022 293b 0a20 2020 2073 697a  tf(" ");.    siz
00000aa0: 652b 2b3b 0a20 207d 0a7d 0a0a 2f2a 2a0a  e++;.  }.}../**.
00000ab0: 202a 2042 6974 7320 6f75 7470 7574 2066   * Bits output f
00000ac0: 6f72 2078 7864 2e0a 202a 0a20 2a20 5365  or xxd.. *. * Se
00000ad0: 6520 6d79 7878 642e 6d64 2066 6f72 2064  e myxxd.md for d
00000ae0: 6574 6169 6c73 2e0a 202a 0a20 2a20 696e  etails.. *. * in
00000af0: 7075 743a 2069 6e70 7574 2073 7472 6561  put: input strea
00000b00: 6d0a 202a 2a2f 0a76 6f69 6420 7265 6164  m. **/.void read
00000b10: 416e 6450 7269 6e74 496e 7075 7441 7342  AndPrintInputAsB
00000b20: 6974 7328 4649 4c45 202a 696e 7075 7429  its(FILE *input)
00000b30: 207b 0a20 2075 6e73 6967 6e65 6420 6368   {.  unsigned ch
00000b40: 6172 2064 6174 615b 365d 3b0a 2020 696e  ar data[6];.  in
00000b50: 7420 6e75 6d42 7974 6573 5265 6164 203d  t numBytesRead =
00000b60: 2066 7265 6164 2864 6174 612c 2031 2c20   fread(data, 1, 
00000b70: 362c 2069 6e70 7574 293b 0a20 2075 6e73  6, input);.  uns
00000b80: 6967 6e65 6420 696e 7420 6f66 6673 6574  igned int offset
00000b90: 203d 2030 3b0a 2020 7768 696c 6528 6e75   = 0;.  while(nu
00000ba0: 6d42 7974 6573 5265 6164 2021 3d20 3029  mBytesRead != 0)
00000bb0: 207b 0a20 2020 2070 7269 6e74 6628 2225   {.    printf("%
00000bc0: 3038 783a 222c 206f 6666 7365 7429 3b0a  08x:", offset);.
00000bd0: 2020 2020 6f66 6673 6574 202b 3d20 6e75      offset += nu
00000be0: 6d42 7974 6573 5265 6164 3b0a 2020 2020  mBytesRead;.    
00000bf0: 7072 696e 7444 6174 6141 7342 6974 7328  printDataAsBits(
00000c00: 6461 7461 2c20 6e75 6d42 7974 6573 5265  data, numBytesRe
00000c10: 6164 293b 0a20 2020 2070 7269 6e74 6628  ad);.    printf(
00000c20: 2220 2022 293b 0a20 2020 2070 7269 6e74  "  ");.    print
00000c30: 4461 7461 4173 4368 6172 7328 6461 7461  DataAsChars(data
00000c40: 2c20 6e75 6d42 7974 6573 5265 6164 293b  , numBytesRead);
00000c50: 0a20 2020 2070 7269 6e74 6628 225c 6e22  .    printf("\n"
00000c60: 293b 0a20 2020 206e 756d 4279 7465 7352  );.    numBytesR
00000c70: 6561 6420 3d20 6672 6561 6428 6461 7461  ead = fread(data
00000c80: 2c20 312c 2036 2c20 696e 7075 7429 3b0a  , 1, 6, input);.
00000c90: 2020 7d0a 7d0a 0a69 6e74 206d 6169 6e28    }.}..int main(
00000ca0: 696e 7420 6172 6763 2c20 6368 6172 202a  int argc, char *
00000cb0: 2a61 7267 7629 207b 0a20 2069 6e74 2062  *argv) {.  int b
00000cc0: 6974 7320 3d20 4641 4c53 453b 0a20 2046  its = FALSE;.  F
00000cd0: 494c 4520 2a69 6e70 7574 203d 2070 6172  ILE *input = par
00000ce0: 7365 436f 6d6d 616e 644c 696e 6528 6172  seCommandLine(ar
00000cf0: 6763 2c20 6172 6776 2c20 2662 6974 7329  gc, argv, &bits)
00000d00: 3b0a 0a20 2069 6620 2862 6974 7320 3d3d  ;..  if (bits ==
00000d10: 2046 414c 5345 2920 7b0a 2020 2020 7265   FALSE) {.    re
00000d20: 6164 416e 6450 7269 6e74 496e 7075 7441  adAndPrintInputA
00000d30: 7348 6578 2869 6e70 7574 293b 0a20 207d  sHex(input);.  }
00000d40: 2065 6c73 6520 7b0a 2020 2020 7265 6164   else {.    read
00000d50: 416e 6450 7269 6e74 496e 7075 7441 7342  AndPrintInputAsB
00000d60: 6974 7328 696e 7075 7429 3b0a 2020 7d0a  its(input);.  }.
00000d70: 2020 7265 7475 726e 2030 3b0a 7d0a         return 0;.}.
